library(Rcpp)
library(jsonlite)
## library(gtools)

sam.dir <- '~/projects/feelR'
source(file.path(sam.dir, 'R/extractAudioFeatures.R'))
## source(file.path(sam.dir, 'R/standardizeFeatures.R'))

`%.%` <- paste0

red <- '#A51C30'
blue <- '#4E84C4'

## shadowtext <- function(x, y=NULL, labels, col='white', bg='black',
##                        theta = seq(pi/4, 2*pi, length.out=8), r=0.1, cex=1, ... ) {
## 	xy <- xy.coords(x,y)
## 	xo <- r*strwidth('A', cex = cex)
## 	yo <- r*strheight('A', cex = cex)
## 	for (i in theta) {
## 		text( xy$x + cos(i)*xo, xy$y + sin(i)*yo,
##              labels, col=bg, cex=cex, ... )
## 	}
## 	text(xy$x, xy$y, labels, col=col, cex=cex, ... )
## }



################
## timestamps ##
################

if (!file.exists('obama_thatsnotwhoweare.csv')){
  fname <- 'obama_whoweare.wav'
  json <- system(
    sprintf('gcloud ml speech recognize %s  --language-code="en-US" --include-word-time-offsets',
            fname
            ),
    intern = TRUE
  )
  onevoice.transcript <- do.call(
    rbind,
    fromJSON(onevoice.json, simplifyVector = FALSE)$results[[1]]$alternatives[[1]]$words
  )
  onevoice.transcript <- as.data.frame(onevoice.transcript)
  write.csv(onevoice.transcript,
            'obama_20121105_desmoines_extract_onevoice.csv',
            row.names = FALSE
            )
} else {
  onevoice.transcript <- read.csv('obama_onevoice.csv',
                                  stringsAsFactors = FALSE
                                  )
}

you
know
what
thats
not
who
we
are
thats
not
what
this
country
is
about
as
americans
we
believe
we
are
endowed
by
our
creator
with
certain
unalienable
rights


turnout.transcript <- data.frame(
  startTime = c(0, 0.1875, 0.5375, 0.76875, 1.0125, 1.19375),
  endTime = c(0.1875, 0.5375, 0.76875, 1.0125, 1.19375, 1.5),
  word = c('I\'ve', 'gotta', 'turn', 'out', 'the', 'vote')
)



####################
## audio features ##
####################

audio <- extractAudioFeatures(
  wav.fnames = 'obama_thatsnotwhoweare.wav',
  derivatives = 0
)$data[[1]]



#####################
## plot utterances ##
#####################

audio[audio[,'f0_mhs'] < 85, 'f0_mhs'] <- NA

transcript$energy <- sapply(
  1:nrow(onevoice.transcript),
  function(i){
    max(
      audio[,'energy_dB'][
        attr(audio, 'timestamps') / 1000 >= transcript$startTime[i] &
          attr(audio, 'timestamps') / 1000 < transcript$endTime[i]
      ],
      na.rm = TRUE
    )
  })

turnout.transcript$energy <- sapply(
  1:nrow(turnout.transcript),
  function(i){
    max(
      turnout.audio[,'energy_dB'][
        attr(turnout.audio, 'timestamps') / 1000 >= turnout.transcript$startTime[i] &
          attr(turnout.audio, 'timestamps') / 1000 < turnout.transcript$endTime[i]
      ],
      na.rm = TRUE
    )
  })

doorfuture.transcript$energy <- sapply(
  1:nrow(doorfuture.transcript),
  function(i){
    max(
      doorfuture.audio[,'energy_dB'][
        attr(doorfuture.audio, 'timestamps') / 1000 >= doorfuture.transcript$startTime[i] &
          attr(doorfuture.audio, 'timestamps') / 1000 < doorfuture.transcript$endTime[i]
      ],
      na.rm = TRUE
    )
  })

transcript <- read.csv('obama_transcript.csv',
                       stringsAsFactors = FALSE
                       )
transcript$tone.short <- c(
  'STORYTELLING' = 'STORY',
  'CROWD-ROUSING' = 'ROUSE'
)[transcript$tone]
transcript$color <- c(
  'STORYTELLING' = blue,
  'CROWD-ROUSING' = red
)[transcript$tone]
transcript$ind <- 1:nrow(transcript)

pdf('transcript.pdf', 5, 3.5)
par(mar = rep(0, 4), oma = rep(0, 4))
plot(NA,
     xlim = c(-10, 50),
     ylim = c(-nrow(transcript), -1),
     axes = FALSE,
     xlab = NA,
     ylab = NA
     )
text(-7,
     -transcript$ind,
     labels = transcript$tone.short,
     col = transcript$color,
     font = 2,
     cex = 1.1,
     adj = c(.5, .5)
     )
text(0,
     -transcript$ind,
     labels = transcript$text,
     cex = 1,
     adj = c(0, .5)
     )
dev.off()



################
## plot words ##
################

pdf('utterances.pdf', 12, 6)

par(mfrow = c(2, 1), mar = rep(0, 4), oma = rep(0, 4))

plot(attr(turnout.audio, 'timestamps') / 1000,
     turnout.audio[,'f0_mhs'],
     axes = FALSE,
     type = 'l',
     ylim = c(0, 350),
     xlab = NA,
     ylab = NA
     )
text((turnout.transcript$startTime + turnout.transcript$endTime) / 2,
     y = rep(100, nrow(turnout.transcript)),
     labels = turnout.transcript$word,
     cex = 1.5 * log(turnout.transcript$energy - 68),
     adj = c(.5, .5),
     col = 'gray30'
     )
for (i in 2:nrow(turnout.transcript)){
  lines(x = rep(turnout.transcript$startTime[i], 2),
        y = c(50, 150),
        lty = 2
        )
}
for (t in seq_along(attr(turnout.audio, 'timestamps'))){
  if (t == 1){
    next
  }
  rect(xleft = attr(turnout.audio, 'timestamps')[t] / 1000 - .0125,
       xright = attr(turnout.audio, 'timestamps')[t] / 1000,
       ybottom = 15,
       ytop = 25,
       col = c('white', red %.% '80', red)[turnout.sounds[t]]
       )
    rect(xleft = attr(turnout.audio, 'timestamps')[t] / 1000 - .0125,
       xright = attr(turnout.audio, 'timestamps')[t] / 1000,
       ybottom = 15,
       ytop = 25,
       col = 'black',
       border = NA,
       angle = 45,
       density = c(0, 20, 0)[turnout.sounds[t]],
       lwd = .5
       )
  ## text(x = attr(turnout.audio, 'timestamps')[t] / 1000 - .0125/2,
  ##      y = 20 + (t %% 2) * 10 - 5,
  ##      labels = t
  ##      )
}

plot(attr(onevoice.audio, 'timestamps') / 1000,
     onevoice.audio[,'f0_mhs'],
     axes = FALSE,
     type = 'l',
     ylim = c(0, 350),
     xlab = NA,
     ylab = NA
     )
text((onevoice.transcript$startTime + onevoice.transcript$endTime) / 2,
     y = rep(100, nrow(onevoice.transcript)),
     labels = onevoice.transcript$word,
     cex = 1.5 * log(onevoice.transcript$energy - 68),
     adj = c(.5, .5),
     col = 'gray30'
     )
for (i in 2:nrow(onevoice.transcript)){
  lines(x = rep(onevoice.transcript$startTime[i], 2),
        y = c(50, 150),
        lty = 2
        )
}
for (t in seq_along(attr(onevoice.audio, 'timestamps'))){
  if (t == 1){
    next
  }
  rect(xleft = attr(onevoice.audio, 'timestamps')[t] / 1000 - .0125,
       xright = attr(onevoice.audio, 'timestamps')[t] / 1000,
       ybottom = 15,
       ytop = 25,
       col = c('white', blue %.% '80', blue)[onevoice.sounds[t]]
       )
  rect(xleft = attr(onevoice.audio, 'timestamps')[t] / 1000 - .0125,
       xright = attr(onevoice.audio, 'timestamps')[t] / 1000,
       ybottom = 15,
       ytop = 25,
       col = 'black',
       border = NA,
       angle = 45,
       density = c(0, 20, 0)[onevoice.sounds[t]],
       lwd = .5
       )

}

dev.off()




######################
## plot transitions ##
######################

## A <- rbind(
##   c(0, 1, 1),
##   c(1, 0, 1),
##   c(1, 1, 0)
## )
## A <- matrix(1, 3, 3)
## G <- graph.adjacency(A, 'directed')

K <- 3
## thetas <- rep(-seq(2*pi/K, 2*pi, 2*pi/K), times=K)
## thetas <- c(-pi/3, pi/2, 5*pi/3)

for (col in c('blue', 'red')){
  for (i in 1:K){
    for (j in 1:K){
      A <- matrix(0, K, K)
      A[i, j] <- 1
      G <- graph.adjacency(A, 'directed')
      pdf(sprintf('transitions/transitions_%s%s_%s.pdf', i, j, col), 4, 4)
      par(mar = rep(0, 4), oma = rep(0, 4))
      print(
        plot(G,
             layout = cbind(
               x = .4 * cos(seq(2*pi/K, 2*pi, 2*pi/K) + pi/6),
               y = .4 * sin(seq(2*pi/K, 2*pi, 2*pi/K) + pi/6)
             ),
             vertex.color = c('white', get(col) %.% '80', get(col)),
             vertex.size = 40,
             vertex.label = NA,
             vertex.frame.color = 'black',
             vertex.frame.width = 10,
             ## vertex.label.color = 'black',
             ## vertex.label.font = vertex.label.font,
             edge.width = 1,
             edge.curved = TRUE,
             edge.label = NA,
             edge.color = 'black',
             edge.loop.angle = (-seq(2*pi/K, 2*pi, 2*pi/K) - pi/6)[i],
             ## edge.loop.angle = rep(-seq(2*pi/K, 2*pi, 2*pi/K) - pi/6, times=K),
             xlim = c(-.8, .8),
             ylim = c(-.8, .8),
             ## xlim = c(-1.5, 1.5),
             ## ylim = c(-1.5, 1.5),
             rescale = FALSE
             )
      )
      dev.off()
    }
  }
}

for (col in c('red', 'blue')){
  A <- matrix(0, K, K)
  G <- graph.adjacency(A, 'directed')
  pdf(sprintf('transitions/transitions_empty_%s.pdf', col), 4, 4)
  par(mar = rep(0, 4), oma = rep(0, 4))
  print(
    plot(G,
         layout = cbind(
           x = .4 * cos(seq(2*pi/K, 2*pi, 2*pi/K) + pi/6),
           y = .4 * sin(seq(2*pi/K, 2*pi, 2*pi/K) + pi/6)
         ),
         vertex.color = c('white', get(col) %.% '80', get(col)),
         vertex.size = 40,
         vertex.label = NA,
         vertex.frame.color = 'black',
         vertex.frame.width = 10,
         ## vertex.label.color = 'black',
         ## vertex.label.font = vertex.label.font,
         edge.width = 1,
         edge.curved = TRUE,
         edge.label = NA,
         edge.color = 'black',
         edge.loop.angle = NA,
         xlim = c(-.8, .8),
         ylim = c(-.8, .8),
         ## xlim = c(-1.5, 1.5),
         ## ylim = c(-1.5, 1.5),
         rescale = FALSE
         )
  )
  dev.off()
}

for (col in c('red', 'blue')){
  A <- matrix(1, K, K)
  G <- graph.adjacency(A, 'directed')
  pdf(sprintf('transitions/transitions_full_%s.pdf', col), 4, 4)
  par(mar = rep(0, 4), oma = rep(0, 4))
  print(
    plot(G,
         layout = cbind(
           x = .4 * cos(seq(2*pi/K, 2*pi, 2*pi/K) + pi/6),
           y = .4 * sin(seq(2*pi/K, 2*pi, 2*pi/K) + pi/6)
         ),
         vertex.color = c('white', get(col) %.% '80', get(col)),
         vertex.size = 40,
         vertex.label = NA,
         vertex.frame.color = 'black',
         vertex.frame.width = 10,
         ## vertex.label.color = 'black',
         ## vertex.label.font = vertex.label.font,
         edge.width = 1,
         edge.curved = TRUE,
         edge.label = NA,
         edge.color = 'black',
         edge.loop.angle = rep(-seq(2*pi/K, 2*pi, 2*pi/K) - pi/6, times=K),
         xlim = c(-.8, .8),
         ylim = c(-.9, .7),
         ## xlim = c(-1.5, 1.5),
         ## ylim = c(-1.5, 1.5),
         rescale = FALSE
         )
  )
  dev.off()
}



##############################
## plot state distributions ##
##############################

ellipse <- function(mu, Sigma, radius){
  # adapted from car::ellipse
  segments <- 50
  angles <- (0:segments) * 2 * pi/segments
  unit.circle <- cbind(cos(angles), sin(angles))
  Q <- chol(Sigma, pivot = TRUE)
  order <- order(attr(Q, 'pivot'))
  return(t(mu + radius * t(unit.circle %*% Q[, order])))
}


pdf('states.pdf', 4, 4)
par(oma = rep(0, 4), mar = c(2, 2, 0, 0))
plot(NA,
     xlim = c(0, 3),
     ylim = c(0, 3),
     asp = 1,
     xlab = NA,
     ylab = NA,
     axes = FALSE,
     xaxs = 'i',
     yaxs = 'i'
     )
lines(c(0, 0), c(0, 3), lwd = 3)
lines(c(0, 3), c(0, 0), lwd = 3)
mus <- list(c(.75, 1.75),
            c(2, .75)
            )
Sigmas <- list(rbind(c(.25, -.1),
                     c(-.1, 1)
                     ),
               rbind(c(.5, .1),
                     c(.1, .25)
                     )
               )
for (k in 1:2){
  lines(ellipse(mu = mus[[k]], Sigma = Sigmas[[k]], radius = 1),
        col = c(red, red %.% '40')[k],
        lwd = 6
        )
}
lines(ellipse(mu = mus[[2]], Sigma = Sigmas[[2]], radius = 1),
      col = 'black',
      lty = 2,
      lwd = 1
      )
points(mus[[1]][1],
       mus[[1]][2],
       pch = 4,
       col = red,
       lwd = 6,
       cex = 2
       )
points(mus[[2]][1],
       mus[[2]][2],
       pch = 4,
       col = red %.% '80',
       lwd = 6,
       cex = 2
       )
points(mus[[2]][1],
       mus[[2]][2],
       pch = 4,
       lty = 2,
       cex = 2
       )
title(xlab = 'zero-crossing rate', line = .75, cex.lab = 2)
title(ylab = 'autocorrelation', line = .5, cex.lab = 2)
dev.off()






######################
## inspect features ##
######################

par(mfrow = c(3, 1))

plot(attr(onevoice.audio, 'timestamps') / 1000,
     onevoice.audio[,'energy_dB'],
     axes = FALSE,
     main = 'energy',
     type = 'l'
     )
axis(1, seq(0, 1.5, .1))
axis(2)
abline(v = onevoice.transcript$startTime)
text((onevoice.transcript$startTime + onevoice.transcript$endTime) / 2,
     y = 50,
     labels = onevoice.transcript$word,
     cex = 2 * log(onevoice.transcript$energy - 72),
     adj = c(.5, .5)
     )

plot(attr(onevoice.audio, 'timestamps') / 1000,
     onevoice.audio[,'autocorrelation'],
     axes = FALSE,
     main = 'autocorrelation',
     type = 'l'
     )
axis(1, seq(0, 1.5, .1))
axis(2)
abline(v = onevoice.transcript$startTime)

par(mfrow = c(2, 1))
plot(attr(onevoice.audio, 'timestamps') / 1000,
     onevoice.audio[,'energy_dB'],
     axes = FALSE,
     type = 'l'
     )
axis(1, seq(0, 1.5, .1))
axis(2)
abline(v = onevoice.transcript$startTime)

plot(attr(turnout.audio, 'timestamps') / 1000,
     turnout.audio[,'energy_dB'],
     axes = FALSE,
     type = 'l'
     )
axis(1, seq(0, 1.5, .1))
axis(2)
abline(v = turnout.transcript$startTime)



####################
## compare romney ##
####################

## set scaling to ensure equal average font size
mean(log(onevoice.transcript$energy - 68))
mean(log(doorfuture.transcript$energy - 65.5))

pdf('utterances_obamaromney.pdf', 12, 8)
par(mfrow = c(2, 1), mar = c(5.1, 6.1, 4.1, 2.1))
plot(attr(onevoice.audio, 'timestamps') / 1000,
     onevoice.audio[,'f0_mhs'],
     axes = FALSE,
     type = 'l',
     ylim = c(125, 325),
     xlab = NA,
     ylab = NA,
     main = 'Barack Obama',
     cex.main = 2
     )
axis(2, cex = 1.5)
mtext('Pitch (Hz)', 2, line = 3, cex = 1.5)
text((onevoice.transcript$startTime + onevoice.transcript$endTime) / 2,
     y = rep(150, nrow(onevoice.transcript)),
     labels = onevoice.transcript$word,
     cex = log(onevoice.transcript$energy - 68),
     adj = c(.5, .5),
     col = 'gray30'
     )
plot(attr(doorfuture.audio, 'timestamps') / 1000,
     doorfuture.audio[,'f0_mhs'],
     axes = FALSE,
     type = 'l',
     ylim = c(125, 325) - 60,
     xlab = NA,
     ylab = NA,
     main = 'Mitt Romney',
     cex.main = 2
     )
axis(2, cex = 1.5)
mtext('Pitch (Hz)', 2, line = 3, cex = 1.5)
text((doorfuture.transcript$startTime + doorfuture.transcript$endTime) / 2,
     y = rep(150, nrow(onevoice.transcript)) - 60,
     labels = doorfuture.transcript$word,
     cex = log(doorfuture.transcript$energy - 65),
     adj = c(.5, .5),
     col = 'gray30'
     )
dev.off()
